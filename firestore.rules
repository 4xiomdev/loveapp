rules_version = "2";
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if user is partner
    function isPartner(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
        get(/databases/$(database)/documents/users/$(userId)).data.partnerId == request.auth.uid;
    }

    // Allow read access to all authenticated users
    match /{document=**} {
      allow read: if isAuthenticated();
    }

    // Users collection - allow creation and access
    match /users/{userId} {
      allow create, update: if isAuthenticated();
      allow delete: if isAuthenticated() && isOwner(userId);
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
      
      // Allow updating calendar connection status
      allow update: if isOwner(userId) && (
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['calendarConnected', 'lastCalendarSync'])
      );
    }

    // Messages collection
    match /messages/{messageId} {
      allow create, update, delete: if isAuthenticated();
    }

    // Moods collection
    match /moods/{moodId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        isPartner(resource.data.userId)
      );
      allow create, update: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid
      );
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid
      );
    }

    // Transactions collection
    match /transactions/{transactionId} {
      allow create, update, delete: if isAuthenticated();
    }

    // Coupons collection
    match /coupons/{couponId} {
      allow create, update, delete: if isAuthenticated();
    }

    // Accountability collection
    match /accountability/{docId} {
      allow read: if isAuthenticated() && (
        resource.data.owner == request.auth.uid ||
        resource.data.owner == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.partnerId
      );
      allow create: if isAuthenticated() && request.resource.data.owner == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.owner == request.auth.uid;
    }

    // Reminders collection
    match /reminders/{reminderId} {
      allow create, update, delete: if isAuthenticated();
    }

    // Daily status collection
    match /dailyStatus/{docId} {
      allow create, update, delete: if isAuthenticated();
    }

    // Calendar events collection
    match /calendar_events/{eventId} {
      allow read: if isAuthenticated() && (
        resource.data.owner == request.auth.uid ||
        resource.data.owner == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.partnerId
      );
      allow create: if isAuthenticated() && request.resource.data.owner == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.owner == request.auth.uid;
    }

    // Allow users to read and write their own data
    match /users/{userId}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow partner access to events (read only)
    match /users/{userId}/events/{eventId} {
      allow read: if request.auth != null && 
                    (request.auth.uid == userId || 
                     exists(/databases/$(database)/documents/users/$(userId)/partner) && 
                     get(/databases/$(database)/documents/users/$(userId)/partner).data.partnerId == request.auth.uid);
    }
  }
}